{"version":3,"sources":["components/pForm.js","components/filter.js","services/contacts.js","App.js","index.js"],"names":["PersonForm","props","onSubmit","adder","value","name","onChange","nameHandler","number","phoneHandler","type","Filter","q","handler","baseUrl","getAll","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","persons","setPersons","useEffect","contactService","initialContacts","newName","newNum","setNewRecord","query","setQuery","filtered","setFilter","console","log","list","filter","toLowerCase","startsWith","Persons","map","onClick","window","confirm","returnedData","setNotification","setTimeout","catch","e","del","Notification","message","className","notification","event","target","preventDefault","personData","found","length","person","ID","change","returned","per","error","concat","trim","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b57f8c1.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n    return(\n      <form onSubmit={props.adder}>\n          <h2>Add New</h2>\n          <div>\n            name: <input \n                  value={props.name}\n                  onChange={props.nameHandler}\n                  />\n          </div>\n          <div>\n            number: <input value={props.number}\n                        onChange={props.phoneHandler}\n                    />\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n    )\n  }\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = (props) => {\n    return(\n      <div>\n        Filter with: <input value={props.q}\n                        onChange={props.handler}\n                        />\n      </div>\n    )\n  }\n\nexport default Filter","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/persons'\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst del = (data) => {\n  const request = axios.delete(`${baseUrl}/${data.id}`)\n  return (\n    request.then(()=>getAll())\n  )\n}\n\n/*\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update \n}\n*/\n\nexport default { getAll, create, update, del }","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/pForm.js'\nimport Filter from './components/filter.js'\nimport contactService from './services/contacts'\n\nconst App = () => {\n  // Get initial contacts\n  // const [deleted, setDeleted] = useState(false)\n  const [ persons, setPersons ] = useState([])\n  useEffect(() => {\n    contactService\n    .getAll()\n    .then(initialContacts => {\n      setPersons(initialContacts)\n    })\n  }, [])\n  const [[newName,newNum], setNewRecord ] = useState(['',''])\n  const [query,setQuery] = useState('')\n  /* not sure if i should do this */\n  const [filtered,setFilter] = useState(persons)\n  /* functions below */\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personData = {\n      name: newName,\n      number: newNum,\n    }\n    console.log(\"newName:\",newName)\n    console.log(persons)\n    let found = persons.filter(data=>data.name===newName)\n    console.log(found)\n    if (found.length!==0){\n      let person = found[0]\n      const ID = person.id\n      if (person.number===newNum){\n        setNotification(`${newName} and ${newNum} are already present in the phonebook`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      }\n      else{\n        const okay = window.confirm(`${newName} is already present in the phonebook do you want to update the number?`)\n        if (okay){\n          const change = { ...person, number: newNum}\n          contactService\n          .update(ID, change)\n          .then(returned => {\n            setPersons(persons.map(per => per.id !== ID ? per : returned))\n            setNotification(`${newName} is updated with ${newNum} as the new number`)\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setNotification(`${newName} was already deleted from the server`)\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n            setPersons(persons.filter(per => per.id !== ID))\n          })\n        }\n      }\n    }else{\n      contactService\n      .create(personData)\n      .then(returnedData => {\n        setPersons(persons.concat(returnedData))\n        setNotification(`Added ${newName}`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      })\n    }\n    setNewRecord(['',''])\n  }\n\n  /* Handlers below */\n  const handleQueryChange = (event) => {\n    setQuery(event.target.value)\n    //search()\n  }\n\n  useEffect(() => {\n    if (query !== '') {\n      console.log(\"QUERY\",query);\n      let list = persons.filter(data => data?data.name.toLowerCase().startsWith(query.toLowerCase()):false)\n      setFilter(list)\n    }else{\n      console.log(\"QUERY Empty\");\n      setFilter(persons)\n    }\n  }, [query,persons]);\n  \n  const handleNameChange = (event) => {\n    setNewRecord([event.target.value.trim(),newNum])\n    //console.log(\"NameChange\",event.target.value,newName)\n  }\n\n  const handleNumChange = (event) => {\n    //console.log(event.target.value)\n    setNewRecord([newName,event.target.value.trim()])\n  }\n\n  const del = (data,list) => {\n    const result = window.confirm(`Delete ${data.name} ?`)\n    if (result) {\n      contactService.del(data)\n      .then(returnedData => {\n        setNotification(`Deleted ${data.name}`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n        setPersons(returnedData)\n        //setDeleted(true)\n      }).catch(e=>{\n        setNotification(`${data.name} Not found!`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      })\n    }\n  }\n\n  const Persons = (props) => {\n    return(\n      <ul>\n          {props.list.map(data => {\n          return(\n          <li key={data.id}>{data.name} {data.number} \n          <button onClick={()=>del(data)}>delete</button>\n          </li>\n          )\n          })\n          }\n      </ul>\n    )\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"notifier\">\n        {message}\n      </div>\n    )\n  }\n  const [notification, setNotification] = useState(null)\n  /* rendering below */\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      <Filter q={query} handler={handleQueryChange}/>\n      <PersonForm \n        adder = {addPerson}\n        name = {newName}\n        nameHandler = {handleNameChange}\n        number = {newNum}\n        phoneHandler = {handleNumChange}\n      />\n      <h2>Numbers</h2>\n      <Persons list={filtered} />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)\n"],"sourceRoot":""}